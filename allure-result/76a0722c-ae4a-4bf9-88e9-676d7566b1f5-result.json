{"name": "test_search", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (500, 924)\n  (Session info: chrome=128.0.6613.85)\nStacktrace:\n\tGetHandleVerifier [0x00007FF673E6B632+29090]\n\t(No symbol) [0x00007FF673DDE6E9]\n\t(No symbol) [0x00007FF673C9B1CA]\n\t(No symbol) [0x00007FF673CF6C0E]\n\t(No symbol) [0x00007FF673CF4682]\n\t(No symbol) [0x00007FF673CF1B9B]\n\t(No symbol) [0x00007FF673CF0DB5]\n\t(No symbol) [0x00007FF673CE2D61]\n\t(No symbol) [0x00007FF673D166EA]\n\t(No symbol) [0x00007FF673CE26A6]\n\t(No symbol) [0x00007FF673D16900]\n\t(No symbol) [0x00007FF673D365D9]\n\t(No symbol) [0x00007FF673D16493]\n\t(No symbol) [0x00007FF673CE09B1]\n\t(No symbol) [0x00007FF673CE1B11]\n\tGetHandleVerifier [0x00007FF67418881D+3294093]\n\tGetHandleVerifier [0x00007FF6741D4403+3604339]\n\tGetHandleVerifier [0x00007FF6741CA2C7+3563063]\n\tGetHandleVerifier [0x00007FF673F26F16+797318]\n\t(No symbol) [0x00007FF673DE986F]\n\t(No symbol) [0x00007FF673DE5454]\n\t(No symbol) [0x00007FF673DE55E0]\n\t(No symbol) [0x00007FF673DD4A7F]\n\tBaseThreadInitThunk [0x00007FFDDA9F6FD4+20]\n\tRtlUserThreadStart [0x00007FFDDADBCEC1+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a46570787a2638495ea74eb51afbcb30\")>\n\n    def test_search(driver):\n    \n        uipage = UiPage(driver)\n        uipage.set_cookie_policy()\n    \n        #ввод разных значений в строку \"Поиск\"\n        # isFound = uipage.search('Анна Каренина')\n        # assert isFound == True\n    \n        # isFound = uipage.search('Three Men in a Boat')\n        # assert isFound == True\n    \n        # isFound = uipage.search('ПУШКИН')\n        # assert isFound == True\n    \n        # isFound = uipage.search('марина цветаева')\n        # assert isFound == True\n    \n        # isFound = uipage.search('2019')\n        # assert isFound == True\n    \n        # isFound = uipage.search('отцы и дети  }{*?,/')\n        # assert isFound == True\n    \n        #добавление в корзину\n        uipage.search('кролики и удавы')\n>       count_in_cart = uipage.AddToCart()\n\ntest_ui.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\ui_class.py:34: in AddToCart\n    results[0].click()\nC:\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002909321D310>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF673DD4A7F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFDDA9F6FD4+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFDDADBCEC1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (500, 924)\nE         (Session info: chrome=128.0.6613.85)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF673E6B632+29090]\nE       \t(No symbol) [0x00007FF673DDE6E9]\nE       \t(No symbol) [0x00007FF673C9B1CA]\nE       \t(No symbol) [0x00007FF673CF6C0E]\nE       \t(No symbol) [0x00007FF673CF4682]\nE       \t(No symbol) [0x00007FF673CF1B9B]\nE       \t(No symbol) [0x00007FF673CF0DB5]\nE       \t(No symbol) [0x00007FF673CE2D61]\nE       \t(No symbol) [0x00007FF673D166EA]\nE       \t(No symbol) [0x00007FF673CE26A6]\nE       \t(No symbol) [0x00007FF673D16900]\nE       \t(No symbol) [0x00007FF673D365D9]\nE       \t(No symbol) [0x00007FF673D16493]\nE       \t(No symbol) [0x00007FF673CE09B1]\nE       \t(No symbol) [0x00007FF673CE1B11]\nE       \tGetHandleVerifier [0x00007FF67418881D+3294093]\nE       \tGetHandleVerifier [0x00007FF6741D4403+3604339]\nE       \tGetHandleVerifier [0x00007FF6741CA2C7+3563063]\nE       \tGetHandleVerifier [0x00007FF673F26F16+797318]\nE       \t(No symbol) [0x00007FF673DE986F]\nE       \t(No symbol) [0x00007FF673DE5454]\nE       \t(No symbol) [0x00007FF673DE55E0]\nE       \t(No symbol) [0x00007FF673DD4A7F]\nE       \tBaseThreadInitThunk [0x00007FFDDA9F6FD4+20]\nE       \tRtlUserThreadStart [0x00007FFDDADBCEC1+33]\n\nC:\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "stdout", "source": "7454c80b-1e82-4be7-9f6d-f4ff691ed57e-attachment.txt", "type": "text/plain"}], "start": 1724700405984, "stop": 1724700424088, "uuid": "2b0bd4e5-9188-4c0a-84de-83859f3e7ece", "historyId": "f3efa1bcb748b55255692ed403ed54af", "testCaseId": "f3efa1bcb748b55255692ed403ed54af", "fullName": "test_ui#test_search", "labels": [{"name": "suite", "value": "test_ui"}, {"name": "host", "value": "HOME-PC"}, {"name": "thread", "value": "6264-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_ui"}]}